#Save Figure 2
cairo_pdf(file="Figure 2 Alt.pdf", height=11, width=15)
Figure2
dev.off()
dev.off()
#Save Figure 2
cairo_pdf(file="Figure 2 Alt.pdf", height=11, width=15)
Figure2
dev.off()
#Function to process distance data into MDS
Dist2MDS <- function(dist, Species=Species, PlotTitle="", labels=FALSE, shapevec=arunshape, colorvec=aruncol) {
#Yo, this has no error control, so don't go crazy
fit <- cmdscale(dist, eig=T, k=2)
vec <- cbind(rownames(fit$points),fit$points[,1:2])
vec <- merge(vec, species, by.x="V1", by.y="Sample") #merge with species name
vec$V2 <- as.numeric(as.character(vec$V2)) #change col types
vec$V3 <- as.numeric(as.character(vec$V3)) #change col types
plot <- ggplot(data=vec, aes(x = V2, y = V3, color=Species, shape=Species)) +
labs(title=PlotTitle, x="Dimension 1", y="Dimension 2") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
geom_point(size = 3) +
if (labels) {
geom_text_repel(aes(label = V1))
} +
#gg scale color manual with colors and labels
aruncol  +
#gg scale shape manual with labels and shapes
arunshape
return()
}
#Function to process distance data into MDS
Dist2MDS <- function(dist, Species=Species, PlotTitle="", labels=FALSE, shapevec=arunshape, colorvec=aruncol) {
#Yo, this has no error control, so don't go crazy
fit <- cmdscale(dist, eig=T, k=2)
vec <- cbind(rownames(fit$points),fit$points[,1:2])
vec <- merge(vec, species, by.x="V1", by.y="Sample") #merge with species name
vec$V2 <- as.numeric(as.character(vec$V2)) #change col types
vec$V3 <- as.numeric(as.character(vec$V3)) #change col types
plot <- ggplot(data=vec, aes(x = V2, y = V3, color=Species, shape=Species)) +
labs(title=PlotTitle, x="Dimension 1", y="Dimension 2") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
geom_point(size = 3) +
if (labels) {
geom_text_repel(aes(label = V1))
} +
#gg scale color manual with colors and labels
aruncol  +
#gg scale shape manual with labels and shapes
arunshape
return(plot)
}
# Read in the phased WXY, LFY, and plastid distance matrices from SplitsTree4
#consider whether you want to use Hamming distance (like Plink) or a phylogenetic distance
WXYmds <- read.nexus.dist(file="phylo/WXY/WXY.dist.nex")
getwd()
# Read in the phased WXY, LFY, and plastid distance matrices from SplitsTree4
#consider whether you want to use Hamming distance (like Plink) or a phylogenetic distance
WXYmds <- read.nexus.dist(file="phylo/WXY/WXY.dist.nex")
# Read in the phased WXY, LFY, and plastid distance matrices from SplitsTree4
#consider whether you want to use Hamming distance (like Plink) or a phylogenetic distance
WXYmds <- read.nexus.dist(file="phylo/WXY/WXY.dist.nex")
#Function to process distance data into MDS
Dist2MDS <- function(dist, Species=Species, PlotTitle="", labels=FALSE, shapevec=arunshape, colorvec=aruncol) {
#Yo, this has no error control, so don't go crazy
fit <- cmdscale(dist, eig=T, k=2)
vec <- cbind(rownames(fit$points),fit$points[,1:2])
vec <- merge(vec, species, by.x="V1", by.y="Sample") #merge with species name
vec$V2 <- as.numeric(as.character(vec$V2)) #change col types
vec$V3 <- as.numeric(as.character(vec$V3)) #change col types
plot <- ggplot(data=vec, aes(x = V2, y = V3, color=Species, shape=Species)) +
labs(title=PlotTitle, x="Dimension 1", y="Dimension 2") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
geom_point(size = 3) +
if (labels) {
geom_text_repel(aes(label = V1))
} +
#gg scale color manual with colors and labels
aruncol  +
#gg scale shape manual with labels and shapes
arunshape
return(plot)
}
wxyplottest <- Dist2MDS(WXYmds, PlotTitle = "WXY SNPs \n(Phased)")
wxyplottest
#Function to process distance data into MDS
Dist2MDS <- function(dist, Species=Species, PlotTitle="", labels=FALSE, shapevec=arunshape, colorvec=aruncol) {
#Yo, this has no error control, so don't go crazy
fit <- cmdscale(dist, eig=T, k=2)
vec <- cbind(rownames(fit$points),fit$points[,1:2])
vec <- merge(vec, species, by.x="V1", by.y="Sample") #merge with species name
vec$V2 <- as.numeric(as.character(vec$V2)) #change col types
vec$V3 <- as.numeric(as.character(vec$V3)) #change col types
plot <- ggplot(data=vec, aes(x = V2, y = V3, color=Species, shape=Species)) +
labs(title=PlotTitle, x="Dimension 1", y="Dimension 2") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
geom_point(size = 3) +
if (labels) {
geom_text_repel(aes(label = V1))
} +
#gg scale color manual with colors and labels
colorvec  +
#gg scale shape manual with labels and shapes
shapevec
return(plot)
}
wxyplottest <- Dist2MDS(WXYmds, PlotTitle = "WXY SNPs \n(Phased)")
wxyplottest
plot <- ggplot(data=vec, aes(x = V2, y = V3, color=Species, shape=Species)) +
labs(title=PlotTitle, x="Dimension 1", y="Dimension 2") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
geom_point(size = 3) +
if (labels) {
geom_text_repel(aes(label = V1))
} +
colorvec  +
shapevec
#Function to process distance data into MDS
Dist2MDS <- function(dist, Species=Species, PlotTitle="", labels=FALSE, shapevec=arunshape, colorvec=aruncol) {
#Yo, this has no error control, so don't go crazy
fit <- cmdscale(dist, eig=T, k=2)
vec <- cbind(rownames(fit$points),fit$points[,1:2])
vec <- merge(vec, species, by.x="V1", by.y="Sample") #merge with species name
vec$V2 <- as.numeric(as.character(vec$V2)) #change col types
vec$V3 <- as.numeric(as.character(vec$V3)) #change col types
plot <- ggplot(data=vec, aes(x = V2, y = V3, color=Species, shape=Species)) +
labs(title=PlotTitle, x="Dimension 1", y="Dimension 2") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
geom_point(size = 3) +
if (labels) {
geom_text_repel(aes(label = V1))
} +
colorvec  +
shapevec
return(plot)
}
wxyplottest <- Dist2MDS(WXYmds, PlotTitle = "WXY SNPs \n(Phased)")
wxyplottest
#Function to process distance data into MDS
Dist2MDS <- function(dist, Species=species, PlotTitle="", labels=FALSE, shapevec=arunshape, colorvec=aruncol) {
#Yo, this has no error control, so don't go crazy
fit <- cmdscale(dist, eig=T, k=2)
vec <- cbind(rownames(fit$points),fit$points[,1:2])
vec <- merge(vec, species, by.x="V1", by.y="Sample") #merge with species name
vec$V2 <- as.numeric(as.character(vec$V2)) #change col types
vec$V3 <- as.numeric(as.character(vec$V3)) #change col types
plot <- ggplot(data=vec, aes(x = V2, y = V3, color=species, shape=species)) +
labs(title=PlotTitle, x="Dimension 1", y="Dimension 2") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
geom_point(size = 3) +
colorvec +
shapevec +
if (labels) {
geom_text_repel(aes(label = V1))
} +
return(plot)
}
wxyplottest <- Dist2MDS(WXYmds, PlotTitle = "WXY SNPs \n(Phased)")
wxyplottest
#Function to process distance data into MDS
Dist2MDS <- function(dist, Species=species, PlotTitle="", labels=FALSE, shapevec=arunshape, colorvec=aruncol) {
#Yo, this has no error control, so don't go crazy
fit <- cmdscale(dist, eig=T, k=2)
vec <- cbind(rownames(fit$points),fit$points[,1:2])
vec <- merge(vec, species, by.x="V1", by.y="Sample") #merge with species name
vec$V2 <- as.numeric(as.character(vec$V2)) #change col types
vec$V3 <- as.numeric(as.character(vec$V3)) #change col types
plot <- ggplot(data=vec, aes(x = V2, y = V3, color=Species, shape=Species)) +
labs(title=PlotTitle, x="Dimension 1", y="Dimension 2") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
geom_point(size = 3) +
colorvec +
shapevec +
if (labels) {
geom_text_repel(aes(label = V1))
} +
return(plot)
}
wxyplottest <- Dist2MDS(WXYmds, PlotTitle = "WXY SNPs \n(Phased)")
wxyplottest
wxyplottest <- Dist2MDS(WXYmds, PlotTitle = "WXY SNPs \n(Phased)", labels=T)
wxyplottest
#Function to process distance data into MDS
Dist2MDS <- function(dist, Species=species, PlotTitle="", labels=FALSE, shapevec=arunshape, colorvec=aruncol) {
#Yo, this has no error control, so don't go crazy
fit <- cmdscale(dist, eig=T, k=2)
vec <- cbind(rownames(fit$points),fit$points[,1:2])
vec <- merge(vec, species, by.x="V1", by.y="Sample") #merge with species name
vec$V2 <- as.numeric(as.character(vec$V2)) #change col types
vec$V3 <- as.numeric(as.character(vec$V3)) #change col types
plot <- ggplot(data=vec, aes(x = V2, y = V3, color=Species, shape=Species)) +
labs(title=PlotTitle, x="Dimension 1", y="Dimension 2") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
geom_point(size = 3) +
colorvec +
shapevec +
if (labels) {
geom_text_repel(aes(label = FID))
} +
return(plot)
}
wxyplottest <- Dist2MDS(WXYmds, PlotTitle = "WXY SNPs \n(Phased)", labels=T)
wxyplottest
wxyplottest <- Dist2MDS(WXYmds, PlotTitle = "WXY SNPs \n(Phased)", labels=TRUE)
wxyplottest
#Function to process distance data into MDS
Dist2MDS <- function(dist, Species=species, PlotTitle="", labels=FALSE, shapevec=arunshape, colorvec=aruncol) {
#Yo, this has no error control, so don't go crazy
fit <- cmdscale(dist, eig=T, k=2)
vec <- cbind(rownames(fit$points),fit$points[,1:2])
vec <- merge(vec, species, by.x="V1", by.y="Sample") #merge with species name
vec$V2 <- as.numeric(as.character(vec$V2)) #change col types
vec$V3 <- as.numeric(as.character(vec$V3)) #change col types
plot <- ggplot(data=vec, aes(x = V2, y = V3, color=Species, shape=Species)) +
labs(title=PlotTitle, x="Dimension 1", y="Dimension 2") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
geom_point(size = 3) +
colorvec +
shapevec +
if (labels) {
geom_text_repel(aes(label = FID))
}
return(plot)
}
wxyplottest <- Dist2MDS(WXYmds, PlotTitle = "WXY SNPs \n(Phased)", labels=TRUE)
wxyplottest
#Function to process distance data into MDS
Dist2MDS <- function(dist, Species=species, PlotTitle="", labels=FALSE, shapevec=arunshape, colorvec=aruncol) {
#Yo, this has no error control, so don't go crazy
fit <- cmdscale(dist, eig=T, k=2)
vec <- cbind(rownames(fit$points),fit$points[,1:2])
vec <- merge(vec, species, by.x="V1", by.y="Sample") #merge with species name
vec$V2 <- as.numeric(as.character(vec$V2)) #change col types
vec$V3 <- as.numeric(as.character(vec$V3)) #change col types
plot <- ggplot(data=vec, aes(x = V2, y = V3, color=Species, shape=Species)) +
labs(title=PlotTitle, x="Dimension 1", y="Dimension 2") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
geom_point(size = 3) +
colorvec +
shapevec +
if (labels) {
geom_text_repel(aes(label = V1))
}
return(plot)
}
wxyplottest <- Dist2MDS(WXYmds, PlotTitle = "WXY SNPs \n(Phased)", labels=TRUE)
wxyplottest
rm(wxyplottest)
#Process WXY
WXYplot <- Dist2MDS(WXYmds, PlotTitle="WXY SNPs \n(Phased)")
WXYplot
splits.LFY
arrows(0,0,1,1)
arrows(0,0,1,1, lwd=3)
arrows(0,0,1,1, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0,0,.1,.1, lwd=3, col="red")
SplitsLFY$.plot$vertices
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0,0, angle=45, length=0.1, lwd=3, col="red")
arrows(0,0,0.001,0.001 angle=45, length=0.1, lwd=3, col="red")
arrows(0,0,0.001,0.001, angle=45, length=0.1, lwd=3, col="red")
arrows(0,-0.01,0.001,0.001, angle=45, length=0.1, lwd=3, col="red")
arrows(0,-0.01,0.001,0.001, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0,-0.01,0.001,0.001, lwd=3, col="red")
arrows(0,-0.03,0.001,0.001, lwd=3, col="red")
arrows(0,-0.1,0.001,0.001, lwd=3, col="red")
arrows(0,-0.5,0.001,0.001, lwd=3, col="red")
arrows(-0.1,-0.5,0.001,0.001, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(-0.1,-0.5,0.001,0.001, lwd=3, col="red")
arrows(-1,-0.5,0.001,0.001, lwd=3, col="red")
arrows(1,-0.5,0.001,0.001, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(1,-0.5,-0.1,0.001, lwd=3, col="red")
arrows(1,-0.5,-0.01,0.001, lwd=3, col="red")
arrows(1,-0.5,-0.001,0.001, lwd=3, col="red")
arrows(1,-0.5,-0.001,0.0001, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(1,-0.5,-0.001,-0.0001, lwd=3, col="red")
arrows(0.5,-0.5,-0.001,-0.0001, lwd=3, col="red")
arrows(0.25,-0.125,-0.001,-0.0001, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0.25,-0.125,-0.001,-0.0001, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0.125,-0.0625,-0.001,-0.0001, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0.0125,-0.00625,-0.001,-0.0001, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0.0125,-0.00625,-0.001,-0.00001, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0.0125,-0.00625,-0.001,-0.0002, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0.0125,-0.00625,-0.001,-0.001, lwd=3, col="red")
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0.0125,-0.00625,-0.001,-0.001, lwd=3, col="red", angle=20)
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0.02,-0.001,-0.001,-0.001, lwd=3, col="red", angle=20)
arrows(0.0125,-0.00625,-0.001,-0.001, lwd=3, col="red", angle=20)
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
arrows(0.0125,-0.00625,-0.001,-0.001, lwd=3, col="red", angle=15)
#Plot LFY
splits.LFY %<a-% {
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
#there is a gap btw Tec and Gig that separates each Hull Haplotype
mtext("LFY", side=3, cex=1.7, line=-1)
arrows(0.0125,-0.00625,-0.001,-0.001, lwd=3, col="red", angle=15)
}
#Figure 2
Figure2 %<a-% {
par(mar=c(1,0,1,0))
split.screen(c(1,2))
par(oma=c(0,0,2,0))
split.screen(c(3,1), screen=2)
#split.screen(c(1,2), screen=4)
screen(3)
splits.All
screen(1)
splits.LFY
legend("bottomright",legend=speciesnames,col=speciescolors, pch=c(rep("X",4),"H"), bty="n", cex=1.3)
screen(4)
splits.WXY
screen(5)
splits.plas
mtext("SplitsTree", side=3, outer=T, line=, cex=3)
close.screen(all=T)
}
dev.off()
#Save Figure 2
cairo_pdf(file="Figure 2 Alt.pdf", height=11, width=15)
Figure2
dev.off()
#Plot LFY
splits.LFY %<a-% {
plot(SplitsLFYAcro, "2D",
tip.col = species[match(SplitsLFY$tip.label, species$Sample),"color"],
edge.width = .7,
cex = 1,
font = 3)
#there is a gap btw Tec and Gig that separates each Hull Haplotype
mtext("LFY", side=3, cex=1.7, line=-1)
arrows(0.00625,-0.003125,-0.001,-0.001, lwd=3, col="red", angle=15)
}
#Figure 2
Figure2 %<a-% {
par(mar=c(1,0,1,0))
split.screen(c(1,2))
par(oma=c(0,0,2,0))
split.screen(c(3,1), screen=2)
#split.screen(c(1,2), screen=4)
screen(3)
splits.All
screen(1)
splits.LFY
legend("bottomright",legend=speciesnames,col=speciescolors, pch=c(rep("X",4),"H"), bty="n", cex=1.3)
screen(4)
splits.WXY
screen(5)
splits.plas
mtext("SplitsTree", side=3, outer=T, line=, cex=3)
close.screen(all=T)
}
#Save Figure 2
cairo_pdf(file="Figure 2 Alt.pdf", height=11, width=15)
Figure2
dev.off()
Plasmds <- read.nexus.dist(file="~/Downloads/Plastid_NoMissing.dist.nex")
PlsPlot <- Dist2MDS(Plasmds, PlotTitle = "Plastid SNPs \n(Phased)")
PlsPlot
PlsPlot <- Dist2MDS(Plasmds, PlotTitle = "Plastid SNPs \n(Phased)", labels=T)
PlsPlot
?cairo_pdf
library(phangorn)
library(ggplot2)
library(ggrepel)
library(pryr)
library(cowplot)
theme_set(theme_cowplot())
#Read in the species assignment data
species <- read.csv("phylo/JTCoords.csv", header=T, stringsAsFactors = F)
species$Species <- gsub(pattern = "\\.| " , "", species$Species)
species$Species <- substr(species$Species,1,4)
species$Species <- factor(species$Species, levels=c("Aapp", "Agig", "Atec", "Ahyb", "Unkn"))
# make a color blind friendly palette
#make it from several lists so that I can call it with base plotting and ggplot
speciescolors <- c("#000000FF",
"#2A788EFF",
"#FFCC00FF",
"#808080FF",
"#7AD151FF")
speciesnames <- c(expression(paste(italic("A. appalachiana"))),
expression(paste(italic("A. gigantea"))),
expression(paste(italic("A. tecta"))),
"Hybrid",
"Hull Road")
aruncol <- scale_color_manual(breaks = levels(species$Species),
values = speciescolors,
labels = speciesnames)
#add the colors to the species table
species$color <- setNames(speciescolors, levels(species$Species))[species$Species]
# shape hybrid sampels differently
arunshape <- scale_shape_manual(breaks = levels(species$Species),
values = c(16, 16, 16, 4, 16),
labels = speciesnames)
